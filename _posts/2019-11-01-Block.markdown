---
layout:     post
title:      "Block"
subtitle:   " - "
date:       2019-11-01 20:00:00
author:     "Yxi"
header-img: "img/post-bg-2015.jpg"
catalog: true
<!-- tags:
    - 开发 -->
---

> “Yeah It's on. ”


## 前言
学无止境

<p id = "build"></p>
---

## Block

### 一、本质
Block其实就是一个`OC`对象，内部也有一个`isa`指针，封装了函数及函数调用

也可以使用`[Block Class]`等方法，一直调用`[[[Block superClass] superClass] ... ]`会找到它的基类是NSObject 

`__NSXXXBlock__ : NSBlock : NSObject`

### 结构
```cpp
static struct __test_block_desc_0 {
  size_t reserved;
  size_t Block_size;
}

struct __block_impl {
  void *isa;
  int Flags;
  int Reserved;
  void *FuncPtr;
};

struct __test_block_impl_0 {
  struct __block_impl impl;
  struct __test_block_desc_0* Desc;
  int a;
  int *b;
  __test_block_impl_0(void *fp, struct __test_block_desc_0 *desc, int _a, int *_b, int flags=0) : a(_a), b(_b) {
    impl.isa = &_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
```

## 捕获变量(capture)
  取决于变量是否是全局的，局部变量都会捕获，目的是跨函数访问
  如果访问的是对象类型，结构会变成，多了`copy`和`dispose`，因为block需要对对象进行内存管理
  一个是将block从栈复制到堆，另一个是从堆中释放时
  ```cpp
  static struct __main_block_desc_0 {
  size_t reserved;
  size_t Block_size;
  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);
  void (*dispose)(struct __main_block_impl_0*);
}
  ```
  
  - 局部变量
  	- auto 变量，会捕获，值传递
  	- static 变量，会捕获，地址传递

  - 全局变量
  	- 不捕获，直接访问

## 类型

|类型|存放区域|环境|
|:-:|:-:|:-:|
|`__NSGlobalBlock__` |数据区 data区|没有访问auto变量|
|`__NSMallocBlock__`|堆|`__NSStackBlock__`调用了copy|
|`__NSStackBlock__`|栈|访问了auto变量|

* 在`ARC`环境下，编译器会自动调用copy，


## __block 修改变量
被`__block`修饰的变量，结构变成以下
```c++
struct __Block_byref_age_0 {
  void *__isa;
__Block_byref_age_0 *__forwarding;
 int __flags;
 int __size;
 int age;
};

struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  NSObject *p;
  __Block_byref_age_0 *age; // by ref
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, NSObject *_p, __Block_byref_age_0 *_age, int flags=0) : p(_p), age(_age->__forwarding) {
    impl.isa = &_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
```

修改变量两种方式：
- 将变量修改为`static`或者`全局变量`
- `__block`
    - 可以用于解决block内部无法修改auto变量的情况
    - 无法用于全局变量、静态变量（`static`关键字修饰的变量）
```
static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {
    // __block修饰的变量，最后一个参数：8
    _Block_object_assign((void*)&dst->a, (void*)src->a, 8/*BLOCK_FIELD_IS_BYREF*/);
    // OC对象，最后一个参数：3
    _Block_object_assign((void*)&dst->ocObj, (void*)src->ocObj, 3/*BLOCK_FIELD_IS_OBJECT*/);}
    ```
    
## 内存管理

## 循环引用
通过`__weak` 和 `__unsafe_unretained`，将block内部捕获的对象，设置为弱引用
- `__weak`：不会产生强引用，指向的对象销毁时，指针会自动置为nil
- `__unsafe_unretained`：不会产生强引用，不安全，指向的对象销毁时，指针存储的地址值不变